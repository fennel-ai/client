// @generated
// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataType {
    #[prost(oneof="data_type::Dtype", tags="1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17")]
    pub dtype: ::core::option::Option<data_type::Dtype>,
}
/// Nested message and enum types in `DataType`.
pub mod data_type {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Dtype {
        #[prost(message, tag="1")]
        IntType(super::IntType),
        #[prost(message, tag="2")]
        DoubleType(super::DoubleType),
        #[prost(message, tag="3")]
        StringType(super::StringType),
        #[prost(message, tag="4")]
        BoolType(super::BoolType),
        #[prost(message, tag="5")]
        TimestampType(super::TimestampType),
        #[prost(message, tag="6")]
        ArrayType(::prost::alloc::boxed::Box<super::ArrayType>),
        #[prost(message, tag="7")]
        MapType(::prost::alloc::boxed::Box<super::MapType>),
        #[prost(message, tag="8")]
        EmbeddingType(super::EmbeddingType),
        #[prost(message, tag="9")]
        BetweenType(::prost::alloc::boxed::Box<super::Between>),
        #[prost(message, tag="10")]
        OneOfType(::prost::alloc::boxed::Box<super::OneOf>),
        #[prost(message, tag="11")]
        RegexType(super::RegexType),
        #[prost(message, tag="12")]
        OptionalType(::prost::alloc::boxed::Box<super::OptionalType>),
        #[prost(message, tag="13")]
        StructType(super::StructType),
        #[prost(message, tag="14")]
        DecimalType(super::DecimalType),
        #[prost(message, tag="15")]
        DateType(super::DateType),
        #[prost(message, tag="16")]
        BytesType(super::BytesType),
        #[prost(message, tag="17")]
        NullType(super::NullType),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Field {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub dtype: ::core::option::Option<DataType>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NullType {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IntType {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DoubleType {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StringType {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BoolType {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TimestampType {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DateType {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BytesType {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegexType {
    #[prost(string, tag="1")]
    pub pattern: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArrayType {
    #[prost(message, optional, boxed, tag="1")]
    pub of: ::core::option::Option<::prost::alloc::boxed::Box<DataType>>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EmbeddingType {
    #[prost(int32, tag="2")]
    pub embedding_size: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapType {
    #[prost(message, optional, boxed, tag="1")]
    pub key: ::core::option::Option<::prost::alloc::boxed::Box<DataType>>,
    #[prost(message, optional, boxed, tag="2")]
    pub value: ::core::option::Option<::prost::alloc::boxed::Box<DataType>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StructType {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub fields: ::prost::alloc::vec::Vec<Field>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Between {
    #[prost(message, optional, boxed, tag="1")]
    pub dtype: ::core::option::Option<::prost::alloc::boxed::Box<DataType>>,
    #[prost(message, optional, boxed, tag="2")]
    pub min: ::core::option::Option<::prost::alloc::boxed::Box<Value>>,
    #[prost(message, optional, boxed, tag="3")]
    pub max: ::core::option::Option<::prost::alloc::boxed::Box<Value>>,
    #[prost(bool, tag="4")]
    pub strict_min: bool,
    #[prost(bool, tag="5")]
    pub strict_max: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OneOf {
    #[prost(message, optional, boxed, tag="1")]
    pub of: ::core::option::Option<::prost::alloc::boxed::Box<DataType>>,
    #[prost(message, repeated, tag="2")]
    pub options: ::prost::alloc::vec::Vec<Value>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptionalType {
    #[prost(message, optional, boxed, tag="1")]
    pub of: ::core::option::Option<::prost::alloc::boxed::Box<DataType>>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DecimalType {
    #[prost(int32, tag="1")]
    pub scale: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Schema {
    #[prost(message, repeated, tag="1")]
    pub fields: ::prost::alloc::vec::Vec<Field>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DsSchema {
    #[prost(message, optional, tag="1")]
    pub keys: ::core::option::Option<Schema>,
    #[prost(message, optional, tag="2")]
    pub values: ::core::option::Option<Schema>,
    #[prost(string, tag="3")]
    pub timestamp: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="4")]
    pub erase_keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Value {
    #[prost(oneof="value::Variant", tags="1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13")]
    pub variant: ::core::option::Option<value::Variant>,
}
/// Nested message and enum types in `Value`.
pub mod value {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Variant {
        #[prost(message, tag="1")]
        None(super::None),
        #[prost(bool, tag="2")]
        Bool(bool),
        #[prost(int64, tag="3")]
        Int(i64),
        #[prost(double, tag="4")]
        Float(f64),
        #[prost(string, tag="5")]
        String(::prost::alloc::string::String),
        #[prost(message, tag="6")]
        Timestamp(::prost_types::Timestamp),
        #[prost(message, tag="7")]
        Embedding(super::Embedding),
        #[prost(message, tag="8")]
        List(::prost::alloc::boxed::Box<super::List>),
        #[prost(message, tag="9")]
        Map(::prost::alloc::boxed::Box<super::Map>),
        #[prost(message, tag="10")]
        Struct(super::StructValue),
        #[prost(message, tag="11")]
        Decimal(super::Decimal),
        #[prost(message, tag="12")]
        Date(super::Date),
        #[prost(bytes, tag="13")]
        Bytes(::prost::alloc::vec::Vec<u8>),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Embedding {
    #[prost(double, repeated, tag="1")]
    pub values: ::prost::alloc::vec::Vec<f64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct List {
    #[prost(message, optional, boxed, tag="1")]
    pub dtype: ::core::option::Option<::prost::alloc::boxed::Box<DataType>>,
    #[prost(message, repeated, tag="2")]
    pub values: ::prost::alloc::vec::Vec<Value>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Map {
    #[prost(message, optional, boxed, tag="1")]
    pub key_dtype: ::core::option::Option<::prost::alloc::boxed::Box<DataType>>,
    #[prost(message, optional, boxed, tag="2")]
    pub value_dtype: ::core::option::Option<::prost::alloc::boxed::Box<DataType>>,
    #[prost(message, repeated, tag="3")]
    pub entries: ::prost::alloc::vec::Vec<map::Entry>,
}
/// Nested message and enum types in `Map`.
pub mod map {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Entry {
        #[prost(message, optional, tag="1")]
        pub key: ::core::option::Option<super::Value>,
        #[prost(message, optional, tag="2")]
        pub value: ::core::option::Option<super::Value>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StructValue {
    #[prost(message, repeated, tag="1")]
    pub fields: ::prost::alloc::vec::Vec<struct_value::Entry>,
}
/// Nested message and enum types in `StructValue`.
pub mod struct_value {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Entry {
        #[prost(string, tag="1")]
        pub name: ::prost::alloc::string::String,
        #[prost(message, optional, tag="2")]
        pub value: ::core::option::Option<super::Value>,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Decimal {
    #[prost(int32, tag="1")]
    pub scale: i32,
    #[prost(int64, tag="2")]
    pub value: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Date {
    #[prost(int64, tag="2")]
    pub days: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct None {
}
// @@protoc_insertion_point(module)
