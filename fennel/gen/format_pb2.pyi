"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class FileFormat(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Parquet(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing_extensions.final
    class Json(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing_extensions.final
    class Avro(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing_extensions.final
    class Hudi(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing_extensions.final
    class DeltaTable(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing_extensions.final
    class CSV(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        DELIMITER_FIELD_NUMBER: builtins.int
        delimiter: builtins.bytes
        def __init__(
            self,
            *,
            delimiter: builtins.bytes = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["delimiter", b"delimiter"]) -> None: ...

    PARQUET_FIELD_NUMBER: builtins.int
    JSON_FIELD_NUMBER: builtins.int
    AVRO_FIELD_NUMBER: builtins.int
    HUDI_FIELD_NUMBER: builtins.int
    DELTA_TABLE_FIELD_NUMBER: builtins.int
    CSV_FIELD_NUMBER: builtins.int
    @property
    def parquet(self) -> global___FileFormat.Parquet: ...
    @property
    def json(self) -> global___FileFormat.Json: ...
    @property
    def avro(self) -> global___FileFormat.Avro: ...
    @property
    def hudi(self) -> global___FileFormat.Hudi: ...
    @property
    def delta_table(self) -> global___FileFormat.DeltaTable: ...
    @property
    def csv(self) -> global___FileFormat.CSV: ...
    def __init__(
        self,
        *,
        parquet: global___FileFormat.Parquet | None = ...,
        json: global___FileFormat.Json | None = ...,
        avro: global___FileFormat.Avro | None = ...,
        hudi: global___FileFormat.Hudi | None = ...,
        delta_table: global___FileFormat.DeltaTable | None = ...,
        csv: global___FileFormat.CSV | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["avro", b"avro", "csv", b"csv", "delta_table", b"delta_table", "hudi", b"hudi", "json", b"json", "kind", b"kind", "parquet", b"parquet"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["avro", b"avro", "csv", b"csv", "delta_table", b"delta_table", "hudi", b"hudi", "json", b"json", "kind", b"kind", "parquet", b"parquet"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["kind", b"kind"]) -> typing_extensions.Literal["parquet", "json", "avro", "hudi", "delta_table", "csv"] | None: ...

global___FileFormat = FileFormat
