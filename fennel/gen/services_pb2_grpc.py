# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fennel.gen.status_pb2 as status__pb2
import fennel.gen.stream_pb2 as stream__pb2


class FennelFeatureStoreStub(object):
    """The generated code needs to be hand modified to add the following
    import stream_pb2 as stream__pb2 to import fennel.gen.stream_pb2 as stream__pb2
    More info: https://github.com/protocolbuffers/protobuf/issues/1491 & https://github.com/protocolbuffers/protobuf/issues/881

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterSource = channel.unary_unary(
            '/fennel.proto.FennelFeatureStore/RegisterSource',
            request_serializer=stream__pb2.CreateSourceRequest.SerializeToString,
            response_deserializer=status__pb2.Status.FromString,
        )
        self.RegisterConnector = channel.unary_unary(
            '/fennel.proto.FennelFeatureStore/RegisterConnector',
            request_serializer=stream__pb2.CreateConnectorRequest.SerializeToString,
            response_deserializer=status__pb2.Status.FromString,
        )


class FennelFeatureStoreServicer(object):
    """The generated code needs to be hand modified to add the following
    import stream_pb2 as stream__pb2 to import fennel.gen.stream_pb2 as stream__pb2
    More info: https://github.com/protocolbuffers/protobuf/issues/1491 & https://github.com/protocolbuffers/protobuf/issues/881

    """

    def RegisterSource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterConnector(self, request, context):
        """
        rpc RegisterAggregate (users.GetUsersRequest) returns (stream  users.GetUsersResult);
        rpc RegisterFeature (users.GetUsersRequest) returns (stream  users.GetUsersResult);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FennelFeatureStoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'RegisterSource': grpc.unary_unary_rpc_method_handler(
            servicer.RegisterSource,
            request_deserializer=stream__pb2.CreateSourceRequest.FromString,
            response_serializer=status__pb2.Status.SerializeToString,
        ),
        'RegisterConnector': grpc.unary_unary_rpc_method_handler(
            servicer.RegisterConnector,
            request_deserializer=stream__pb2.CreateConnectorRequest.FromString,
            response_serializer=status__pb2.Status.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'fennel.proto.FennelFeatureStore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class FennelFeatureStore(object):
    """The generated code needs to be hand modified to add the following
    import stream_pb2 as stream__pb2 to import fennel.gen.stream_pb2 as stream__pb2
    More info: https://github.com/protocolbuffers/protobuf/issues/1491 & https://github.com/protocolbuffers/protobuf/issues/881

    """

    @staticmethod
    def RegisterSource(request,
                       target,
                       options=(),
                       channel_credentials=None,
                       call_credentials=None,
                       insecure=False,
                       compression=None,
                       wait_for_ready=None,
                       timeout=None,
                       metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fennel.proto.FennelFeatureStore/RegisterSource',
                                             stream__pb2.CreateSourceRequest.SerializeToString,
                                             status__pb2.Status.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterConnector(request,
                          target,
                          options=(),
                          channel_credentials=None,
                          call_credentials=None,
                          insecure=False,
                          compression=None,
                          wait_for_ready=None,
                          timeout=None,
                          metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fennel.proto.FennelFeatureStore/RegisterConnector',
                                             stream__pb2.CreateConnectorRequest.SerializeToString,
                                             status__pb2.Status.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
