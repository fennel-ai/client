name: Build, Test, and Publish

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    name: Build, Test, and Publish Package

    steps:
      # Checkout the Python client repository
      - name: Check out client repository (Python)
        uses: actions/checkout@v2

      # Checkout the Rust server repository
      - name: Check out server repository (Rust)
        uses: actions/checkout@v2
        with:
          repository: 'fennel-ai/server'
          token: ${{ secrets.SERVER_CHECKOUT }}
          path: 'server'
          ref: 'main'

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      # Install Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Load cached Python virtual environment if it exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      
      # Install Python dependencies if the cache does not exist
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # Set up Rust toolchain
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true

      # Install protobuf compiler (protoc)
      - name: Install protobuf compiler (protoc)
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      # Install Maturin to build the package
      - name: Install Maturin
        run: python -m pip install maturin

      # Build the package using Maturin
      - name: Build the package using Maturin
        run: maturin build --release --features "extension-module" --manifest-path ./server/fennel_data_lib/Cargo.toml --out dist 
     
     # Install the built package
      - name: Install built package
        run: |
          source .venv/bin/activate
          python -m pip install dist/*.whl
          python -c "import fennel_data_lib"

      # Run Python tests
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest fennel --run_slow

      # Publish the package to PyPI if all tests pass
      - name: Publish to PyPI
        run: |
          pip install setuptools wheel twine
          twine upload --repository pypi dist/* --verbose -u __token__ -p ${{ secrets.PYPI_PACKAGR_ACCESS_TOKEN }}
